<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itheima.mapper.BrandMapper">
    <!--
        数据库表的字段名称 和 实体类的属性名称 不一样，则不能自动封装数据
            (1) 起别名: 对不一样的列名起别名，让别名和实体类的属性名一样
                    缺点: 每次查询都要定义一次别名
                    解决方法: sql片段
                        缺点: 不灵活
            (2) resultMap:
                1. 定义resultMap标签
                2. 在<select>标签中，使用resultMap属性替换 resultType属性
    -->

    <!-- id唯一标识。type指定映射的类型，支持别名-->
    <resultMap id="brandResultMap" type="brand">
        <!--
        id: 完成主键字段的影视
            column: 表的列名
            property: 实体类的属性名
        result: 完成一般字段的映射
            column: 表的列名
            property: 实体类的属性名
        -->
        <result column="brand_name" property="brandName" />
        <result column="company_name" property="companyName" />
    </resultMap>

    <select id="selectAll" resultMap="brandResultMap">
        select *
        from tb_brand;
    </select>


    <!--
    参数占位符
        1. #{}: 会将其替换为 ?. 为了防止SQL注入
        2. ${}: 拼sql，会存在sql注入问题
        3. 使用时机:
            参数传递的时候: #{}
            表名或者列名不固定的情况下: ${} 会存在sql注入问题
    设置参数类型: parameterType可以省略

     -->
<!--    <select id="selectById" parameterType="int" resultMap="brandResultMap">-->
<!--        select *-->
<!--        from tb_brand where id = #{id};-->
<!--    </select>-->

    <!--
    特殊字符处理:
        1. 转义字符
        2. CDATA区
    这里是因为会出现比如说在sql语句中想要使用小于号，但是在XML文件中小于号是标签的开头字符，需要转换语义
    -->
    <select id="selectById" parameterType="int" resultMap="brandResultMap">
        select *
        from tb_brand where id
        <![CDATA[<]]>
        #{id};
    </select>
</mapper>