<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itheima.mapper.BrandMapper">
    <!-- 第一部分，查询所有 -->
    <!--
    这样做是最初始的状态，当要进行查询所有的时候，可以这样做，
    但是会发现一个问题，数据库表的字段名称 和 实体类的属性名称 不一样，则不能自动封装数据，查询出来的结果就是null
     -->
<!--    <select id="selectAll" resultType="brand">-->
<!--        select * from tb_brand;-->
<!--    </select>-->

    <!--
    所以推出这种改进版，使用别名，来对应上Brand类中的属性名的定义。但是有个问题就是每次都得写好多别名，不方便
     -->
<!--    <select id="selectAll" resultType="brand">-->
<!--        select id, brand_name AS brandName, company_name AS companyName, ordered, description, status -->
<!--        from tb_brand;-->
<!--    </select>-->

    <!--
    所以又推出了抽出sql片段的版本，但是这样也有缺点，不灵活，如果想要只查这些属性中的一部分属性，那么就有可能会出现，
    定义好多sql片段的情况
     -->
<!--    <sql id="brand_column">-->
<!--        id, brand_name AS brandName, company_name AS companyName, ordered, description, status-->
<!--    </sql>-->
    <!--    <select id="selectAll" resultType="brand">-->
    <!--        select <include refid="brand_column" /> -->
    <!--        from tb_brand;-->
    <!--    </select>-->

    <!--
     所以为了解决sql片段的问题，推出了resultMap
     这里面有两个标签，一个是id，一个是result。id是用来完成对主键字段的映射，result是用来完成对一般字段的映射。
     下面用的是result，因为brand_name和company_name都是一般字段。
     column: 表的列名
     property: 实体类的属性名
     -->
    <resultMap id="brandResultMap" type="brand">
        <result column="brand_name" property="brandName" />
        <result column="company_name" property="companyName" />
    </resultMap>

    <select id="selectAll" resultMap="brandResultMap">
        select *
        from tb_brand;
    </select>


    <!-- 这里是第二部分，查看详情 -->
    <!--
        参数占位符
            1. #{}: 会将其替换为 ?. 为了防止SQL注入
            2. ${}: 拼sql，会存在sql注入问题
            3. 使用时机:
                参数传递的时候: #{}
                表名或者列名不固定的情况下: ${} 会存在sql注入问题
        设置参数类型: parameterType可以省略
     -->
    <!--    <select id="selectById" parameterType="int" resultMap="brandResultMap">-->
    <!--        select *-->
    <!--        from tb_brand where id = #{id};-->
    <!--    </select>-->

    <!--
        特殊字符处理:
            1. 转义字符
            2. CDATA区
        这里是因为会出现比如说在sql语句中想要使用小于号，但是在XML文件中小于号是标签的开头字符，需要转换语义
    -->
    <select id="selectById" parameterType="int" resultMap="brandResultMap">
        select *
        from tb_brand where id
        <![CDATA[<]]>
        #{id};
    </select>

    <!-- 条件查询 -->
    <!-- 多个条件要同时满足的时候，就是条件查询 -->
<!--    <select id="selectByCondition" resultMap="brandResultMap">-->
<!--        select *-->
<!--        from tb_brand-->
<!--        where status = #{status}-->
<!--        and company_name like #{companyName}-->
<!--        and brand_name like #{brandName}-->
<!--    </select>-->

    <!-- 上面这样写条件查询有些情况无法满足，用户可能会输入一部分条件。SQL语句应该动态变化 -->
    <!-- 动态多条件查询 -->
    <!-- if: 条件判断
            test: 逻辑表达式 -->
    <!-- 这里有一个很有意思的小技巧，就是where后面的1 = 1，这样写的原因就是在于，因为and是放在sql语句中的首位，
     当在测试代码中，map.put()将第一个status的查询注释掉，就会造成sql语句报错，因为and成为了where后面直接跟着的查询条件。
     因此，这里写一个1 = 1就是为了满足条件然后能够有机会走到后面的and的sql语句。这就叫做《恒等式》-->
    <!-- 第二种解决这个问题的方法，就是使用<where></where>标签 -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        /* where 1 = 1 */
        <where>
            <if test="status != null">
                status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like #{brandName}
            </if>
        </where>
    </select>
    
    <!-- 单条件的动态条件查询 -->
    <!-- 出现一种情况就是只查询单个条件，下面就是来体现这种方法的 -->
    <!-- 还有一种情况就是如果用户一个都不选，直接搜索，可以使用otherwise标签 -->
<!--    <select id="selectByConditionSingle" resultMap="brandResultMap">-->
<!--        select * -->
<!--        from tb_brand-->
<!--        where-->
<!--        <choose>-->
<!--            <when test="status != null">-->
<!--                status = #{status}-->
<!--            </when>-->
<!--            <when test="companyName != null and companyName != ''">-->
<!--                company_name like #{companyName}-->
<!--            </when>-->
<!--            <when test="brandName != null and brandName != ''">-->
<!--                brand_name like #{brandName}-->
<!--            </when>-->
<!--            <otherwise>-->
<!--                1 = 1-->
<!--            </otherwise>-->
<!--        </choose>-->
<!--    </select>-->

    <!-- 还有一种情况就是如果用户一个都不选，直接搜索，可以使用otherwise标签。在这里是用的where标签来代替otherwise -->
    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <choose>
                <when test="status != null">
                    status = #{status}
                </when>
                <when test="companyName != null and companyName != ''">
                    company_name like #{companyName}
                </when>
                <when test="brandName != null and brandName != ''">
                    brand_name like #{brandName}
                </when>
            </choose>
        </where>
    </select>
</mapper>